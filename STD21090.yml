openapi: 3.0.1
info:
  version: 1.0.0
  title: STD21090
  description: test of api
  termsOfService: terms
  contact:
    name: Jonathan
    email: hei.jonatana@gmail.com
paths:
  /student:
    description: Student Ressource
    get:
      description: opetation fetch data
      parameters:
        - in: query
          name: studentname
          required: true
          schema:
            $ref: '#/definition/schemas/Student'
      responses:
        '200':
          description: Succes response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definition/schemas/Student'
        '404':
          description: PAGE NOT FOUND
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceNotFoundException'
    post:
      description: Add new Student
      responses:
        '201':
          description: post saved
  /courses/{id}:
    description: course by ID
    get:
      description: Specified course
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: course
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotAuthorizedException'  
    post:
      tags:
        - courses
      summary: having new course
      description: ''
      parameters:
        - in: path
          name: id
          description: Having more information about student
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequestException'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceNotFoundException'
  /courses:
    get:
      tags:
        - Courses
      summary: List of all courses
      description: Get all courses
      parameters: []
      responses:
        '200':
          description: List of all courses
        '403':
          description: No authorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotAuthorizedException'
    post:
      tags:
        - Courses
      summary: Create a course
      operationId: createDelayPenaltyChange
      requestBody:
        description: Delay penalties to create
        required: true
        content:
          application/json:
            example:
              items:
              - $ref: '#/definition/schemas/courses'
      responses:
        200:
          description: Courses aded
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotAuthorizedException'
              
  /student{id}/all:
    get:
      description: You will have all about
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username or id supplied
        '403':
          description: No authorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceNotFoundException'
    put:
      tags:
        - Student
      summary: Updated Student
      description: This can only be done by the logged in user.
      operationId: UpdateUser
      parameters:
        - name: id
          in: path
          description: username that need to be update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Student supplied
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceNotFoundException'
    delete:
      tags:
        - Admin
      summary: Reject one student
      description: This can only be done by admin.
      operationId: reject student
      parameters:
        - name: id
          in: path
          description: The student that needs to be removed
          required: true
          schema:
            type: string
      responses:
        403:
          description: No authorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotAuthorizedException'
        404:
          description: Student not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceNotFoundException'
    security:
      - BearerAuth: [ ]


definition:
  schemas:
    CreateStudent:
      type: object
      properties:
        name:
          type: string
          example: Rakoto
        birth_date:
          type: string
          format: date
          example: '2022-01-01'
    Student:
      allOf:
        - $ref: '#/definition/schemas/CreateStudent'
      type: object
      properties:
        id:
          type: integer
          example: 10
    User:
      type: object
      properties:
        name:
          type: string
          example: Rakoto
        birth_date:
          type: string
          format: date
          example: '2022-01-01'
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    CreateCourses:
      type: object
      proprieties:
        name: string
        teacher: string
        createdDatetime: string
        format: date
      courses:
        - $ref: '#/definition/schemas/CreateCourses'
    courses:
      type: object
      proprieties:
        name: string
        teacher: string
        courses:
          - $ref: '#/definition/schemas/courses'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      
      
components:
  schemas:
    Whoami:
      properties:
        id:
          type: string
        role:
          type: string
          enum:
            - STUDENT
            - TEACHER
            - User
        bearer:
          type: string
    User:
      properties:
        id:
          type: string
        ref:
          type: string
          example: STD21090
        first_name:
          type: string
        last_name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
        birth_date:
          type: string
          format: date
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        entrance_datetime:
          type: string
          format: date-time
    EnableStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    Student:
      allOf:
        - $ref: '#/definition/schemas/Student'
    Teacher:
      allOf:
        - $ref: '#/definition/schemas/User'
    Course:
      type: object
      properties:
        id:
          type: string
        ref:
          type: string
          example: SYS2
        name:
          type: string
          example: operating system
        credits:
          type: integer
        total_hours:
          type: integer
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `200`
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/definition/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/definition/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/definition/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
